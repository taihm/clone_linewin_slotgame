// Effect Syntax Guide: https://docs.cocos.com/creator/manual/zh/shader/index.html

CCEffect %{
  techniques:
  - name: opaque
    passes:
    - vert: sprite-vs:vert # builtin header
      frag: fs:frag
      properties: &props
        outlineColor:      { value: [1, 1, 1, 1], editor: { type: color } }
        outlineWidth:      { value: 0.01,editor: { type: float , slide: true , range : [0,1], step: 0.01  } } #宽度
  - name: transparent
    passes:
    - vert: sprite-vs:vert # builtin header
      frag: fs:frag
      blendState:
        targets:
        - blend: true
          blendSrc: src_alpha
          blendDst: one_minus_src_alpha
          blendSrcAlpha: src_alpha
          blendDstAlpha: one_minus_src_alpha
      properties: *props
}%

CCProgram sprite-vs %{
  precision highp float;
  #include <cc-global>
  #if SAMPLE_FROM_RT
    #include <common/common-define>
  #endif
  
  in vec3 a_position;
  in vec2 a_texCoord;
  in vec4 a_color;

  out vec4 i_color;
  out vec2 uv0;

  vec4 vert () {
    vec4 pos = vec4(a_position, 1);


    #if USE_PIXEL_ALIGNMENT
      pos = cc_matView * pos;
      pos.xyz = floor(pos.xyz);
      pos = cc_matProj * pos;
    #else
      pos = cc_matViewProj * pos;
    #endif

    uv0 = a_texCoord;

    #if SAMPLE_FROM_RT
      CC_HANDLE_RT_SAMPLE_FLIP(uv0);
    #endif

    i_color = a_color;
    return pos;
  }
}%

CCProgram fs %{
  precision highp float;
  #include <cc-global>

  #if USE_TEXTURE  
    #include <sprite-texture>
    //老版本引用
    //#include <cc-sprite-texture>
  #endif

  in vec4 i_color;
  in vec2 uv0;

  uniform Constant {
    vec4 outlineColor;
    float outlineWidth;
  };


  #if SHOW_OUT_LINE
  // 将图像往8个方向偏移后，得到一个类似放大的效果，然后取放大后的图像的透明度，即可得到一个放大后的区域，可以很方便填充（描边）颜色
  // 取当前点上、下、左、右、上左、上右、下左、下右共计8个方向，距离为 outlineWidth 的8个点，求他们的透明度之和
  // 由此可以得到当前点是否属于图像往八个方向做偏移后得到的放大图区域，并且能得到该点最终透明度值
  // 最终对应的为图像偏移/放大后的背景区域
  float getBgAlpha() {
    vec4 color_up = texture(cc_spriteTexture, uv0 + vec2(0, outlineWidth)); 
    vec4 color_down = texture(cc_spriteTexture, uv0 - vec2(0, outlineWidth)); 
    vec4 color_left = texture(cc_spriteTexture, uv0 - vec2(outlineWidth, 0)); 
    vec4 color_right = texture(cc_spriteTexture, uv0 + vec2(outlineWidth, 0)); 
    vec4 color_up_left = texture(cc_spriteTexture, uv0 + vec2(outlineWidth, -outlineWidth)); 
    vec4 color_up_right = texture(cc_spriteTexture, uv0 + vec2(outlineWidth, outlineWidth)); 
    vec4 color_down_left = texture(cc_spriteTexture, uv0 + vec2(-outlineWidth, -outlineWidth)); 
    vec4 color_down_right = texture(cc_spriteTexture, uv0 + vec2(-outlineWidth, outlineWidth)); 
    float total = color_right.a + color_left.a + color_down.a + color_up.a + color_up_left.a + color_up_right.a + color_down_left.a + color_down_right.a; 
    return clamp(total, 0.0, 1.0);
  }
  #endif




    vec4 frag() {
      vec4 col = outlineColor;
        #if USE_TEXTURE
          col = texture(cc_spriteTexture, uv0);
        
          #if SHOW_OUT_LINE
          // 无描边宽度即结束
          if (outlineWidth == 0.0) {
            return col;
          }

          // 先画背景色
          vec4 color_dest = outlineColor * getBgAlpha();

          // 然后在背景色上方画图案颜色
          vec4 color_src = col;
          
          col = color_src * color_src.a + color_dest * (1.0 - color_src.a);
          #endif
        #endif
      return col;
    }

}%
